{"name":"ShapeGeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder","comment":"","isAbstract":false,"superclass":"geek_code/geek_code.GeekCodeCategoryBuilder","implements":[],"subclass":[],"variables":{},"inheritedVariables":{"maxGrade":{"name":"maxGrade","qualifiedName":"geek_code/geek_code.GeekCodeCategoryBuilder.maxGrade","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.int","inner":[]}],"annotations":[]},"minGrade":{"name":"minGrade","qualifiedName":"geek_code/geek_code.GeekCodeCategoryBuilder.minGrade","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.ShapeGeekCodeCategoryBuilder-","comment":"","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"code":{"name":"code","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"minGrade":{"name":"minGrade","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]},"maxGrade":{"name":"maxGrade","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"notRigid":{"name":"notRigid","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.notRigid","comment":"","commentFrom":"geek_code-v312.GeekCodeCategoryBuilder.notRigid","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"roundness":{"name":"roundness","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.roundness","comment":"","commentFrom":"geek_code-v312.ShapeGeekCodeCategoryBuilder.roundness","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder","inner":[]}],"parameters":{"roundness":{"name":"roundness","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategory","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"subValidate":{"name":"subValidate","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.subValidate","comment":"","commentFrom":"geek_code-v312.GeekCodeCategoryBuilder.subValidate","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"crossover":{"name":"crossover","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.crossover","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.crossover","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategoryBuilder","inner":[]}],"parameters":{"crossover":{"name":"crossover","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"grade":{"name":"grade","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.grade","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.grade","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"living":{"name":"living","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.living","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.living","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"noKnowledge":{"name":"noKnowledge","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.noKnowledge","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.noKnowledge","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategory","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.noSuchMethod","comment":"<p><a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notRigid":{"name":"notRigid","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.notRigid","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.notRigid","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"refuse":{"name":"refuse","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.refuse","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.refuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategory","inner":[]}],"parameters":{},"annotations":[]},"subValidate":{"name":"subValidate","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.subValidate","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.subValidate","static":false,"abstract":true,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]},"wannabe":{"name":"wannabe","qualifiedName":"geek_code/geek_code-v312.ShapeGeekCodeCategoryBuilder.wannabe","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.wannabe","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeCategoryBuilder","inner":[]}],"parameters":{"wannabe":{"name":"wannabe","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategory","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}