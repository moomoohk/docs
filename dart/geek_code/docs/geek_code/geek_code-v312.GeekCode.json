{"name":"GeekCode","qualifiedName":"geek_code/geek_code-v312.GeekCode","comment":"<p>Class that represents a Geek Code.</p>\n<p> Each Geek Code object has a list of <a>geek_code/geek_code-v312.GeekCodeType</a>s that indicate what type of Geek you are and a set of <a>geek_code/geek_code-v312.GeekCodeCategory</a>s.</p>\n<p> Original documentation:</p>\n<pre><code>The geek code consists of several categories. Each category is labeled with a letter and some qualifiers. Go through each category and determine which set of qualifiers best describes you in that category. By stringing all of these 'codes' together, you are able to construct your overall geek code. It is this single line of code that will inform other geeks the world over of what a great geek you actually are.\nSome of the qualifiers will very probably not match with you exactly. It is impossible to cover all possibilities in each category. Simply choose that qualifier that most closely matches you. Also, some activities described in a specific qualifier you may not engage in, while you do engage in others. Each description of each qualifier describes the wide range of activities that apply, so as long as you match with one, you can probably use that qualifier.\n\nAfter you have determined each of your qualifiers, you need to the construct your GEEK CODE BLOCK. Instructions are provided on how to do this towards the end of this file.\n\nAlso, pay particular attention to case-sensitivity, there can be a big difference between a 'w' and a 'W'.\n</code></pre>","isAbstract":false,"superclass":"dart:core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"geek_code/geek_code-v312.GeekCode.GeekCode-","comment":"<p>Creates a <a>geek_code/geek_code-v312.GeekCode</a> object with <a>geek_code/geek_code-v312.GeekCode.GeekCode-.types</a> set as its types.</p>\n<p> <a>geek_code/geek_code-v312.GeekCode.GeekCode-.types</a> can be <code>null</code> or an empty list.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"types":{"name":"types","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.List","inner":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"addCategory":{"name":"addCategory","qualifiedName":"geek_code/geek_code-v312.GeekCode.addCategory","comment":"<p>Adds a <a>geek_code/geek_code-v312.GeekCodeCategory</a> to this Geek Code object.</p>\n<p> If <a>geek_code/geek_code-v312.GeekCode.addCategory.category</a> already exists a <a>geek_code/geek_code-v312.GeekCodeError</a> will be thrown.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"void","inner":[]}],"parameters":{"category":{"name":"category","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeCategory","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"generate":{"name":"generate","qualifiedName":"geek_code/geek_code-v312.GeekCode.generate","comment":"<p>Base Geek Code block generation method.</p>\n<p>Compiles all the <a>geek_code/geek_code-v312.GeekCodeType</a>s and <a>geek_code/geek_code-v312.GeekCodeCategory</a>s added to this object and returns them in a valid Geek Code block.</p>\n<p>Should only be invoked from a class that extends <a>geek_code/geek_code-v312.GeekCode</a>. In that case a String representing the version of that Geek Code flavor should be passed as <a>geek_code/geek_code-v312.GeekCode.generate.version</a>.</p>\n<p>Example Geek Code block (for Geek Code version 3.12):</p>\n<pre><code>-----BEGIN GEEK CODE BLOCK-----\nVersion: 3.12\nGCS/IT D? E- G++ C++ M++ N? O? K?\nW+++ V? P? !R DI Y X? d-()$\ne b+ a--- o? h-- w--- UB++ t?\ns+++:- !r 5? PS tv+ !PE y\n------END GEEK CODE BLOCK------\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{"version":{"name":"version","optional":true,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code-v312.GeekCode.toString","comment":"<p>Similar to <a>geek_code/geek_code-v312.GeekCode.generate</a> but the output does not contain line breaks or the BEGIN and END lines.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"geek_code/geek_code-v312.GeekCode.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>geek_code/geek_code-v312.GeekCode.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"geek_code/geek_code-v312.GeekCode.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"geek_code/geek_code-v312.GeekCode.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>geek_code/geek_code-v312.GeekCode.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>geek_code/geek_code-v312.GeekCode.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"geek_code/geek_code-v312.GeekCode.noSuchMethod","comment":"<p><a>geek_code/geek_code-v312.GeekCode.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>geek_code/geek_code-v312.GeekCode.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>geek_code/geek_code-v312.GeekCode.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>geek_code/geek_code-v312.GeekCode.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code-v312.GeekCode.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}