{"name":"geek_code","qualifiedName":"geek_code/geek_code","comment":"<p>The base geek_code library.</p>\n<p>Extend this to create your own Geek Code flavor.</p>","variables":{},"functions":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"classes":{"class":[{"name":"BasicGeekCodeCategory","qualifiedName":"geek_code/geek_code.BasicGeekCodeCategory","preview":"<p>Class that represents a basic Geek Code category.</p>"},{"name":"BasicGeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code.BasicGeekCodeCategoryBuilder","preview":"<p>Class that builds <a>geek_code/geek_code.BasicGeekCodeCategory</a>s.</p>"},{"name":"ExtremeGeekCodeCategory","qualifiedName":"geek_code/geek_code.ExtremeGeekCodeCategory","preview":"<p>Class that represents Geek Code categories that can have an \"extreme\" grade.</p>"},{"name":"ExtremeGenericGeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code.ExtremeGenericGeekCodeCategoryBuilder","preview":"<p>Implementation of <a>geek_code/geek_code.GeekCodeCategoryBuilder</a> that allows the setting of an \"extreme\" grade.</p>"},{"name":"G","qualifiedName":"geek_code/geek_code.G","preview":"<p>Base class for Geek Code types.</p>"},{"name":"GeekCode","qualifiedName":"geek_code/geek_code.GeekCode","preview":"<p>Class that represents a Geek Code.</p>"},{"name":"GeekCodeCategory","qualifiedName":"geek_code/geek_code.GeekCodeCategory","preview":"<p>Base class for built Geek Code categories.</p>"},{"name":"GeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code.GeekCodeCategoryBuilder","preview":"<p>Interface for creating <a>geek_code/geek_code.GeekCodeCategory</a>s.</p>"},{"name":"GeekCodeGrade","qualifiedName":"geek_code/geek_code.GeekCodeGrade","preview":"<p>Class that represents a Geek Code grade.</p>"},{"name":"GeekCodeType","qualifiedName":"geek_code/geek_code.GeekCodeType","preview":"<p>Class that represents a Geek Code type.</p>"},{"name":"GenericGeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder","preview":"<p>Simple barebones implementation of <a>geek_code/geek_code.GeekCodeCategoryBuilder</a>.</p>"}],"typedef":{},"error":[{"name":"GeekCodeError","qualifiedName":"geek_code/geek_code.GeekCodeError","preview":"<p>Class that represents a generic Geek Code related error.</p>"}]},"packageName":"geek_code","packageIntro":"<h1>geek_code</h1>\n<p>A Dart implementation of the <a href=\"http://geekcode.com/\">Geek Code</a>.</p>\n<p>This package is actually a port and cleaned up version of <a href=\"http://github.com/moomoohk/JGeekCode/\">JGeekCode</a> from Java.</p>\n<h2>Basic ideas</h2><ul><li>This library uses builders to generate the different categories that make up a Geek Code</li><li>Building a category is done by calling the <code>grade</code> method with a <code>GeekCodeGrade</code> or by calling some of the modifiers (i.e. <code>noKnowledge</code>) instead</li><li>The <code>geek_code</code> library includes a collection of base classes which are useful for implementing custom Geek Code flavors</li><li>The <code>geek_code.v312</code> library is an implementation of the Geek Code v3.12 specification (specified at http://geekcode.com/geek.html), which is useful for generating a personal Geek Code</li></ul>\n<h2>Generating a Geek Code with <code>geek_code.v312</code></h2>\n<p>First you must import the library:</p>\n<pre><code>import \"package:geek_code/geek_code_312.dart\";\n</code></pre>\n<p>Start with a <code>GeekCodeV312</code> object that will contain all the types and categories:</p>\n<pre><code>GeekCodeV312 code = new GeekCodeV312([G312.IT, G312.CS]);\n</code></pre>\n<p>The above constructor receives a list of <code>GeekCodeType</code>s.</p>\n<p>Then add categories to the code object using the <code>addCategory(GeekCodeCategory)</code>.</p>\n<p>All v3.12 categories are globally defined by their code: </p>\n<pre><code>code.addCategory(C.grade(new GeekCodeGrade(2))); // Adds the C category (Computers) with a grade of 2 to the code\n</code></pre>\n<p>Generating a Geek Code block is done by callin <code>generate</code>:</p>\n<pre><code>print(code.generate());\n</code></pre>\n<h3>Variables and modifiers</h3>\n<p>As per the v3.12 specification it is possible to set certain modifiers for categories.</p>\n<pre><code>code.addCategory(h.living().grade(new GeekCodeGrade(-2))); // Adds the h category (Housing) with a grade of -2 and adds the \"living\" modifier to the code\n\n</code></pre>\n<p>Some modifiers are incompatible with each other:</p>\n<p>  code.addCategory(h.living().noKnowledge()); // Throws a GeekCodeError</p>\n<p>Some categories have specific modifiers so be sure to consult the documentation for each builder before using it.</p>\n<h3>Full example</h3>\n<pre><code>GeekCodeV312 code = new GeekCodeV312([G312.IT, G312.CS] as List&lt;GeekCodeType&gt;)\n  ..addCategory(d.crossover(new GeekCodeGrade(0)).living().grade(new GeekCodeGrade(-1)))\n  ..addCategory(s.roundness(new BasicGeekCodeCategoryBuilder().grade(new GeekCodeGrade(-1))).grade(new GeekCodeGrade(3)))\n  ..addCategory(a.grade(new GeekCodeGrade(-3)))\n  ..addCategory(C.grade(new GeekCodeGrade(2)))\n  ..addCategory(U.B().grade(new GeekCodeGrade(2)))\n  ..addCategory(P.noKnowledge())\n  ..addCategory(E.grade(new GeekCodeGrade(-1)))\n  ..addCategory(W.grade(new GeekCodeGrade(3)))\n  ..addCategory(N.noKnowledge())\n  ..addCategory(o.noKnowledge())\n  ..addCategory(K.noKnowledge())\n  ..addCategory(w.grade(new GeekCodeGrade(-3)))\n  ..addCategory(O.noKnowledge())\n  ..addCategory(M.grade(new GeekCodeGrade(2)))\n  ..addCategory(V.noKnowledge())\n  ..addCategory(PS.grade(new GeekCodeGrade(0)))\n  ..addCategory(PE.refuse())\n  ..addCategory(Y.grade(new GeekCodeGrade(0)))\n  ..addCategory(t.noKnowledge())\n  ..addCategory(BABYLON5.noKnowledge())\n  ..addCategory(X.noKnowledge())\n  ..addCategory(R.refuse())\n  ..addCategory(tv.grade(new GeekCodeGrade(1)))\n  ..addCategory(b.grade(new GeekCodeGrade(1)))\n  ..addCategory(DI.grade(new GeekCodeGrade(0)))\n  ..addCategory(D.noKnowledge())\n  ..addCategory(GCode.grade(new GeekCodeGrade(2)))\n  ..addCategory(e.grade(new GeekCodeGrade(0)))\n  ..addCategory(h.grade(new GeekCodeGrade(-2)))\n  ..addCategory(r.refuse())\n  ..addCategory(z.male().grade(new GeekCodeGrade(0)));\nprint(code.generate());\n</code></pre>\n<h2>Feature requests and bug reports</h2>\n<p>Please file feature requests and bug reports at the <a href=\"https://github.com/moomoohk/geek_code/issues\">issue tracker</a>.</p>"}