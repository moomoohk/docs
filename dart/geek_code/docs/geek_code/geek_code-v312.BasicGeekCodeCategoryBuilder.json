{"name":"BasicGeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder","comment":"<p>Class that builds <a>geek_code/geek_code-v312.BasicGeekCodeCategory</a>s.</p>\n<p>All Geek Code category builders extend from this class.</p>\n<p>Categories can have grades and/or variables attached to them.</p>\n<p>The following are methods that allow the settings of variables for this category:</p><ul><li><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.notRigid</a></li><li><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.living</a></li><li><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.crossover</a></li><li><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noKnowledge</a></li><li><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.refuse</a></li></ul>\n<p>All 5 methods return this builder object back after setting the relevant variable so chaining is possible.</p>\n<p>To build the category use the <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.grade</a> method.</p>\n<p>Original documentation:</p>\n<pre><code>Geeks can seldom be strictly quantified. To facilitate the fact that within any one category the geek may not be able to determine a specific rating, variables have been designed to allow this range to be included.\n</code></pre>","isAbstract":false,"superclass":"dart:core.Object","implements":[],"subclass":[],"variables":{},"inheritedVariables":{},"methods":{"setters":{},"getters":{"getLiving":{"name":"getLiving","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.getLiving","comment":"","commentFrom":"geek_code-v312.BasicGeekCodeCategoryBuilder.getLiving","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{},"annotations":[]},"getNoKnowledge":{"name":"getNoKnowledge","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.getNoKnowledge","comment":"","commentFrom":"geek_code-v312.BasicGeekCodeCategoryBuilder.getNoKnowledge","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{},"annotations":[]},"getNoRigid":{"name":"getNoRigid","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.getNoRigid","comment":"","commentFrom":"geek_code-v312.BasicGeekCodeCategoryBuilder.getNoRigid","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{},"annotations":[]},"getRefuse":{"name":"getRefuse","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.getRefuse","comment":"","commentFrom":"geek_code-v312.BasicGeekCodeCategoryBuilder.getRefuse","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{},"methods":{"crossover":{"name":"crossover","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.crossover","comment":"<p><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.crossover.crossover</a> will be used a crossover for this category.</p>\n<p>Original documentation:</p>\n<pre><code>()\n For indicating \"cross-overs\" or ranges. Geeks who go from C+ to C--- depending on the situation (i.e. mostly \"C+\") could use C+(---). @ is different from () in that () has finite limits within the category, while @ ranges all over.\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder","inner":[]}],"parameters":{"crossover":{"name":"crossover","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"grade":{"name":"grade","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.grade","comment":"<p>Builds the <a>geek_code/geek_code-v312.BasicGeekCodeCategory</a> with <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.grade.grade</a> and returns it.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"living":{"name":"living","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.living","comment":"<p>Original documentation:</p>\n<pre><code>$\n Indicates that this particular category is done for a living. For example, UL+++$ indicates that the person utilizes Unix and gets paid for it. Quite a lucky geek, for sure.\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"noKnowledge":{"name":"noKnowledge","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noKnowledge","comment":"<p>Original documentation:</p>\n<pre><code>?\n Unless stated otherwise within the specific category, the ? is placed after the category identifier and indicates that the geek has no knowledge about that specific category. For example, a person that has never even heard of Babylon 5, would list their Babylon 5 category as 5?\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategory","inner":[]}],"parameters":{},"annotations":[]},"notRigid":{"name":"notRigid","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.notRigid","comment":"<p>Original documentation:</p>\n<pre><code>@\n For this variable, said trait is not very rigid, may change with time or with individual interaction. For example, Geeks who happen to very much enjoy Star Trek: The Next Generation, but dislike the old 60's series might list themselves as t++@.\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"refuse":{"name":"refuse","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.refuse","comment":"<p>Original documentation:</p>\n<pre><code>!\n Placed BEFORE the category. Unless stated otherwise, indicates that the person refuses to participate in this category. This is unlike the ? variable as the ? indicates lack of knowledge, while the ! indicates stubborn refusal to participate. For example, !E would be a person that just plain refuses to have anything to do with Emacs, while E? would be a person that doesn't even know what Emacs is.\n</code></pre>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.BasicGeekCodeCategory","inner":[]}],"parameters":{},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noSuchMethod","comment":"<p><a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code-v312.BasicGeekCodeCategoryBuilder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}