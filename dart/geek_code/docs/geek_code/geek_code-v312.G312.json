{"name":"G312","qualifiedName":"geek_code/geek_code-v312.G312","comment":"","isAbstract":false,"superclass":"dart:core.Object","implements":[],"subclass":[],"variables":{"AT":{"name":"AT","qualifiedName":"geek_code/geek_code-v312.G312.AT","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"B":{"name":"B","qualifiedName":"geek_code/geek_code-v312.G312.B","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"C":{"name":"C","qualifiedName":"geek_code/geek_code-v312.G312.C","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"CA":{"name":"CA","qualifiedName":"geek_code/geek_code-v312.G312.CA","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"CC":{"name":"CC","qualifiedName":"geek_code/geek_code-v312.G312.CC","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"CM":{"name":"CM","qualifiedName":"geek_code/geek_code-v312.G312.CM","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"CS":{"name":"CS","qualifiedName":"geek_code/geek_code-v312.G312.CS","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"E":{"name":"E","qualifiedName":"geek_code/geek_code-v312.G312.E","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"ED":{"name":"ED","qualifiedName":"geek_code/geek_code-v312.G312.ED","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"FA":{"name":"FA","qualifiedName":"geek_code/geek_code-v312.G312.FA","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"G":{"name":"G","qualifiedName":"geek_code/geek_code-v312.G312.G","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"H":{"name":"H","qualifiedName":"geek_code/geek_code-v312.G312.H","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"IT":{"name":"IT","qualifiedName":"geek_code/geek_code-v312.G312.IT","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"J":{"name":"J","qualifiedName":"geek_code/geek_code-v312.G312.J","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"L":{"name":"L","qualifiedName":"geek_code/geek_code-v312.G312.L","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"LS":{"name":"LS","qualifiedName":"geek_code/geek_code-v312.G312.LS","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"M":{"name":"M","qualifiedName":"geek_code/geek_code-v312.G312.M","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"MC":{"name":"MC","qualifiedName":"geek_code/geek_code-v312.G312.MC","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"MD":{"name":"MD","qualifiedName":"geek_code/geek_code-v312.G312.MD","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"MU":{"name":"MU","qualifiedName":"geek_code/geek_code-v312.G312.MU","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"O":{"name":"O","qualifiedName":"geek_code/geek_code-v312.G312.O","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"P":{"name":"P","qualifiedName":"geek_code/geek_code-v312.G312.P","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"PA":{"name":"PA","qualifiedName":"geek_code/geek_code-v312.G312.PA","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"S":{"name":"S","qualifiedName":"geek_code/geek_code-v312.G312.S","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"SS":{"name":"SS","qualifiedName":"geek_code/geek_code-v312.G312.SS","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"U":{"name":"U","qualifiedName":"geek_code/geek_code-v312.G312.U","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]},"W":{"name":"W","qualifiedName":"geek_code/geek_code-v312.G312.W","comment":"","final":true,"static":true,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeType","inner":[]}],"annotations":[]}},"inheritedVariables":{},"methods":{"setters":{},"getters":{},"constructors":{},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"geek_code/geek_code-v312.G312.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>geek_code/geek_code-v312.G312.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"geek_code/geek_code-v312.G312.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"geek_code/geek_code-v312.G312.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>geek_code/geek_code-v312.G312.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>geek_code/geek_code-v312.G312.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"geek_code/geek_code-v312.G312.noSuchMethod","comment":"<p><a>geek_code/geek_code-v312.G312.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>geek_code/geek_code-v312.G312.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>geek_code/geek_code-v312.G312.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>geek_code/geek_code-v312.G312.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code-v312.G312.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}