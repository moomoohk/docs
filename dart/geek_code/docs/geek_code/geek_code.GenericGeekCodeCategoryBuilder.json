{"name":"GenericGeekCodeCategoryBuilder","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder","comment":"<p>Simple barebones implementation of <a>geek_code/geek_code.GeekCodeCategoryBuilder</a>.</p>\n<p>Should be good enough for the creation of most <a>geek_code/geek_code.GeekCodeCategory</a>s.</p>","isAbstract":false,"superclass":"geek_code/geek_code.GeekCodeCategoryBuilder","implements":[],"subclass":["geek_code/geek_code.ExtremeGenericGeekCodeCategoryBuilder","geek_code/geek_code-v312.ExtremeGenericGeekCodeCategoryBuilder"],"variables":{},"inheritedVariables":{"maxGrade":{"name":"maxGrade","qualifiedName":"geek_code/geek_code.GeekCodeCategoryBuilder.maxGrade","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.int","inner":[]}],"annotations":[]},"minGrade":{"name":"minGrade","qualifiedName":"geek_code/geek_code.GeekCodeCategoryBuilder.minGrade","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.int","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.GenericGeekCodeCategoryBuilder-","comment":"<p>Creates a new <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder</a> object.</p>\n<p>The first parameter signifies the <a>dart:core.String</a> representation of this category.</p>\n<p>The second parameter indicates what is the lowest grade that can be set in this category while the second indicates the highest.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"code":{"name":"code","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.String","inner":[]}],"value":null,"annotations":[]},"minGrade":{"name":"minGrade","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]},"maxGrade":{"name":"maxGrade","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.int","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{"subValidate":{"name":"subValidate","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.subValidate","comment":"<p>Returns a <a>geek_code/geek_code.GeekCodeCategory</a> without performing any additional validations.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.GeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"inheritedMethods":{"setters":{},"getters":{"hashCode":{"name":"hashCode","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"crossover":{"name":"crossover","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.crossover","comment":"<p><a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.crossover.crossover</a> will be used a crossover for this category.</p>\n<p>Original documentation:</p>\n<pre><code>()\n For indicating \"cross-overs\" or ranges. Geeks who go from C+ to C--- depending on the situation (i.e. mostly \"C+\") could use C+(---). @ is different from () in that () has finite limits within the category, while @ ranges all over.\n</code></pre>","commentFrom":"","inheritedFrom":"geek_code.BasicGeekCodeCategoryBuilder.crossover","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.BasicGeekCodeCategoryBuilder","inner":[]}],"parameters":{"crossover":{"name":"crossover","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"grade":{"name":"grade","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.grade","comment":"<p>Validates all the build parameters and builds the <a>geek_code/geek_code.GeekCodeCategory</a> with <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.grade.grade</a> and returns it.</p>\n<p>Validation is composed of these steps:\n<em> Ensuring the code provided in the constructor is not null and that its length is not 0\n</em> Ensuring the minumum and maximum grades provided in the constructor are not null\n<em> Ensuring the minimum grade is smaller than the maximum grade\n</em> Ensuring that <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.grade.grade</a> is not null</p>\n<p>Once those steps complete successfully <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.subValidate</a> is called with <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.grade.grade</a> and returned.</p>","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.grade","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.GeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"living":{"name":"living","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.living","comment":"<p>Original documentation:</p>\n<pre><code>$\n Indicates that this particular category is done for a living. For example, UL+++$ indicates that the person utilizes Unix and gets paid for it. Quite a lucky geek, for sure.\n</code></pre>","commentFrom":"","inheritedFrom":"geek_code.BasicGeekCodeCategoryBuilder.living","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.BasicGeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"noKnowledge":{"name":"noKnowledge","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.noKnowledge","comment":"<p>Original documentation:</p>\n<pre><code>?\n Unless stated otherwise within the specific category, the ? is placed after the category identifier and indicates that the geek has no knowledge about that specific category. For example, a person that has never even heard of Babylon 5, would list their Babylon 5 category as 5?\n</code></pre>","commentFrom":"","inheritedFrom":"geek_code.BasicGeekCodeCategoryBuilder.noKnowledge","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.BasicGeekCodeCategory","inner":[]}],"parameters":{},"annotations":[]},"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.noSuchMethod","comment":"<p><a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"notRigid":{"name":"notRigid","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.notRigid","comment":"<p>Original documentation:</p>\n<pre><code>@\n For this variable, said trait is not very rigid, may change with time or with individual interaction. For example, Geeks who happen to very much enjoy Star Trek: The Next Generation, but dislike the old 60's series might list themselves as t++@.\n</code></pre>","commentFrom":"","inheritedFrom":"geek_code.BasicGeekCodeCategoryBuilder.notRigid","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.BasicGeekCodeCategoryBuilder","inner":[]}],"parameters":{},"annotations":[]},"refuse":{"name":"refuse","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.refuse","comment":"<p>Original documentation:</p>\n<pre><code>!\n Placed BEFORE the category. Unless stated otherwise, indicates that the person refuses to participate in this category. This is unlike the ? variable as the ? indicates lack of knowledge, while the ! indicates stubborn refusal to participate. For example, !E would be a person that just plain refuses to have anything to do with Emacs, while E? would be a person that doesn't even know what Emacs is.\n</code></pre>","commentFrom":"","inheritedFrom":"geek_code.BasicGeekCodeCategoryBuilder.refuse","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.BasicGeekCodeCategory","inner":[]}],"parameters":{},"annotations":[]},"subValidate":{"name":"subValidate","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.subValidate","comment":"<p>Lets any implementations of this class execute more specific validations to make sure the builder is set correctly.</p>\n<p>Should return a <a>geek_code/geek_code.GeekCodeCategory</a> if all validations are successful.</p>\n<p><a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.subValidate.grade</a> is the grade to apply to this category.</p>","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.subValidate","static":false,"abstract":true,"constant":false,"return":[{"outer":"geek_code/geek_code.GeekCodeCategory","inner":[]}],"parameters":{"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.toString","comment":"<p>Returns a string representation of this object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]},"wannabe":{"name":"wannabe","qualifiedName":"geek_code/geek_code.GenericGeekCodeCategoryBuilder.wannabe","comment":"<p>Takes <a>geek_code/geek_code.GenericGeekCodeCategoryBuilder.wannabe.wannabe</a>'s score and sets it as \"wannabe\" variable for this category.</p>\n<p>Original documentation:</p>\n<pre><code>&gt;\n For 'wannabe' ratings. Indicating that while the geek is currently at one rating, they are striving to reach another. For example, C++&gt;$ indicating a geek that is currently computer savvy, but wants to someday make money at it.\n</code></pre>","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategoryBuilder.wannabe","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code.GeekCodeCategoryBuilder","inner":[]}],"parameters":{"wannabe":{"name":"wannabe","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code.BasicGeekCodeCategory","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}}},"annotations":[],"generics":{}}