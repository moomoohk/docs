{"name":"UnixGeekCodeCategory","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory","comment":"<p>Original documentation:</p>\n<pre><code>It seems that a Unix-based operating system is the OS of choice among most geeks. In addition to telling us about your Unix abilities, you can also show which specific Unix OS you are using. To accomplish this, you include a letter showing the brand with your rating. For example: UL++++ would indicate a sysadmin running Linux.\n\nU++++\n I am the sysadmin. If you try and crack my machine don't be surprised if the municipal works department gets an \"accidental\" computer-generated order to put start a new landfill on your front lawn or your quota is reduced to 4K.\nU+++\n I don't need to crack /etc/passwd because I just modified su so that it doesn't prompt me. The admin staff doesn't even know I'm here. If you don't understand what I just said, this category does NOT apply to you!\nU++\n I've get the entire admin ticked off at me because I am always using all of the CPU time and trying to run programs that I don't have access to. I'm going to try cracking /etc/passwd next week, just don't tell anyone.\nU+\n I not only have a Unix account, but I slam VMS any chance get.\nU\n I have a Unix account to do my stuff in\nU-\n I have a VMS account.\nU--\n I've seen Unix and didn't like it. DEC rules!\nU---\n Unix geeks are actually nerds in disguise.\n</code></pre>","isAbstract":false,"superclass":"geek_code/geek_code.GeekCodeCategory","implements":[],"subclass":[],"variables":{"type":{"name":"type","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.type","comment":"","final":false,"static":false,"constant":false,"type":[{"outer":"geek_code/geek_code-v312.UnixType","inner":[]}],"annotations":[]}},"inheritedVariables":{"code":{"name":"code","qualifiedName":"geek_code/geek_code.GeekCodeCategory.code","comment":"<p><a>dart:core.String</a> representation of this category.</p>","final":false,"static":false,"constant":false,"type":[{"outer":"dart:core.String","inner":[]}],"annotations":[]}},"methods":{"setters":{},"getters":{},"constructors":{"":{"name":"","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.UnixGeekCodeCategory-","comment":"<p>See GeekCodeCategory.GeekCodeCategory for a description of the parameters.</p>","commentFrom":"","inheritedFrom":"","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"builder":{"name":"builder","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.UnixGeekCodeCategoryBuilder","inner":[]}],"value":null,"annotations":[]},"grade":{"name":"grade","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"value":null,"annotations":[]},"type":{"name":"type","optional":false,"named":false,"default":false,"type":[{"outer":"geek_code/geek_code-v312.UnixType","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"operators":{},"methods":{}},"inheritedMethods":{"setters":{},"getters":{"grade":{"name":"grade","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.grade","comment":"<p>Returns this category's grade.</p>","commentFrom":"","inheritedFrom":"geek_code.BasicGeekCodeCategory.grade","static":false,"abstract":false,"constant":false,"return":[{"outer":"geek_code/geek_code-v312.GeekCodeGrade","inner":[]}],"parameters":{},"annotations":[]},"hashCode":{"name":"hashCode","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.hashCode","comment":"<p>Get a hash code for this object.</p>\n<p>All objects have hash codes. Hash codes are guaranteed to be the\nsame for objects that are equal when compared using the equality\noperator <code>==</code>. Other than that there are no guarantees about\nthe hash codes. They will not be consistent between runs and\nthere are no distribution guarantees.</p>\n<p>If a subclass overrides <a>geek_code/geek_code-v312.UnixGeekCodeCategory.hashCode</a> it should override the\nequality operator as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.hashCode","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.int","inner":[]}],"parameters":{},"annotations":[]},"runtimeType":{"name":"runtimeType","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.runtimeType","comment":"<p>A representation of the runtime type of the object.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.runtimeType","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.Type","inner":[]}],"parameters":{},"annotations":[]}},"constructors":{},"operators":{"==":{"name":"==","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.==","comment":"<p>The equality operator.</p>\n<p>The default behavior for all <a>dart:core.Object</a>s is to return true if and\nonly if <code>this</code> and <a>geek_code/geek_code-v312.UnixGeekCodeCategory.==.other</a> are the same object.</p>\n<p>Override this method to specify a different equality relation on\na class. The overriding method must still be an equivalence relation.\nThat is, it must be:</p><ul><li>\n<p>Total: It must return a boolean for all arguments. It should never throw\n   or return <code>null</code>.</p></li><li>\n<p>Reflexive: For all objects <code>o</code>, <code>o == o</code> must be true.</p></li><li>\n<p>Symmetric: For all objects <code>o1</code> and <code>o2</code>, <code>o1 == o2</code> and <code>o2 == o1</code> must\n   either both be true, or both be false.</p></li><li>\n<p>Transitive: For all objects <code>o1</code>, <code>o2</code>, and <code>o3</code>, if <code>o1 == o2</code> and\n   <code>o2 == o3</code> are true, then <code>o1 == o3</code> must be true.</p></li></ul>\n<p>The method should also be consistent over time, so equality of two objects\nshould not change over time, or at least only change if one of the objects\nwas modified.</p>\n<p>If a subclass overrides the equality operator it should override\nthe <a>geek_code/geek_code-v312.UnixGeekCodeCategory.hashCode</a> method as well to maintain consistency.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.==","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.bool","inner":[]}],"parameters":{"other":{"name":"other","optional":false,"named":false,"default":false,"type":[{"outer":"dynamic","inner":[]}],"value":null,"annotations":[]}},"annotations":[]}},"methods":{"noSuchMethod":{"name":"noSuchMethod","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.noSuchMethod","comment":"<p><a>geek_code/geek_code-v312.UnixGeekCodeCategory.noSuchMethod</a> is invoked when users invoke a non-existent method\non an object. The name of the method and the arguments of the\ninvocation are passed to <a>geek_code/geek_code-v312.UnixGeekCodeCategory.noSuchMethod</a> in an <a>dart:core.Invocation</a>.\nIf <a>geek_code/geek_code-v312.UnixGeekCodeCategory.noSuchMethod</a> returns a value, that value becomes the result of\nthe original invocation.</p>\n<p>The default behavior of <a>geek_code/geek_code-v312.UnixGeekCodeCategory.noSuchMethod</a> is to throw a\n<a>dart:core.NoSuchMethodError</a>.</p>","commentFrom":"","inheritedFrom":"dart:core.Object.noSuchMethod","static":false,"abstract":false,"constant":false,"return":[{"outer":"dynamic","inner":[]}],"parameters":{"invocation":{"name":"invocation","optional":false,"named":false,"default":false,"type":[{"outer":"dart:core.Invocation","inner":[]}],"value":null,"annotations":[]}},"annotations":[]},"toString":{"name":"toString","qualifiedName":"geek_code/geek_code-v312.UnixGeekCodeCategory.toString","comment":"","commentFrom":"","inheritedFrom":"geek_code.GeekCodeCategory.toString","static":false,"abstract":false,"constant":false,"return":[{"outer":"dart:core.String","inner":[]}],"parameters":{},"annotations":[]}}},"annotations":[],"generics":{}}